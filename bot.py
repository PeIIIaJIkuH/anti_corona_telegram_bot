import telebot
from telebot import types
import myparser


token = '1000444189:AAEQhcU7LjCneJY--5BtH6kuNVYKeKIEzQo'
bot = telebot.TeleBot(token)


@bot.message_handler(commands=['start'])
def send_welcome(msg):
    markup = types.ReplyKeyboardMarkup(True)
    message = f'Здраствуйте, {msg.from_user.username}.\nЯ информационный бот по коронавирусу.\n\n'
    main_menu(msg, markup)
    bot.send_message(msg.from_user.id, message + 'Могу рассказать вам базовую информацию о коронавирусе и уведомлять вас о самых последних новостях в Казахстане', reply_markup=markup)

@bot.message_handler(commands=['help'])
def send_welcome(msg):
    bot.reply_to(msg, 'Я могу рассказать вам базовую информацию о коронавирусе и уведомлять вас о самых последних новостях в Казахстане.')


@bot.message_handler(content_types=['text'])
def msg_handler(msg):
    markup = types.ReplyKeyboardMarkup(True)
    if msg.text == 'Информация о коронавирусе' or msg.text == 'Назад':
        info(msg, markup)
    if msg.text == 'Статистика в Казахстане':
        parse_data(msg)
    if msg.text == 'В главное меню':
        main_menu(msg, markup)
    if msg.text == 'Что такое коронавирус?':
        what_is_covid(msg, markup)
    if msg.text == 'Какой путь передачи коронавируса?':
        path_covid(msg, markup)
    if msg.text == 'Кто является источником коронавирусной инфекции?':
        origin_covid(msg, markup)
    if msg.text == 'Откуда произошло заражение этой инфекцией?':
        source_covid(msg, markup)
    if msg.text == 'Есть ли вакцина против этой инфекции?':
        vaccine_covid(msg, markup)
    if msg.text == 'Как обезопасить себя от коронавируса?':
        safety(msg, markup)
    if msg.text == 'Можно ли вылечить новый коронавирус?':
        treatment(msg, markup)
    if msg.text == 'Кто в группе риска?':
        risk(msg, markup)
    if msg.text == 'Куда обратиться, если есть симптомы, схожые с коронавирусной инфекцией?':
        symptoms(msg, markup)
    if msg.text == 'Вирус устойчив во внейшней среде?':
        environment(msg, markup)
    if msg.text == 'Как диагностировать коронавирус?':
        diagnose(msg, markup)
    if msg.text == 'Основные симптомы коронавирусной инфекции?':
        main_symptoms(msg, markup)
    if msg.text == 'В чем разница между коронавирусом и вирусом гриппа?':
        difference(msg, markup)
    if msg.text == 'Как определить у себя наличие коронавируса?':
        determine(msg, markup)
    if msg.text == 'Что подразумевает под собой карантин для лиц с подозрением COVID-19 корановирус?':
        quarantine(msg, markup)
    if msg.text == 'Где и как я могу лечить коронавирус?':
        heal(msg, markup)
    if msg.text == 'Какой инкубационный период инфекции?':
        incubation(msg, markup)
    if msg.text == 'Как защитить себя от заражения коронавирусом?':
        protect(msg, markup)
    if msg.text == 'Карантин и изоляция':
        isolation(msg, markup)
    if msg.text == 'Кто будет взят на карантин?':
        isolaiton_countries(msg, markup)
    if msg.text == 'Готова ли наша страна в случае выявления корановируса?':
        ready(msg, markup)
    if msg.text == 'Что такое изоляция на дому, прибывшим из стран 1б категории?':
        home_isolation(msg, markup)


def main_menu(msg, markup):
    markup.row('Информация о коронавирусе')
    markup.row('Статистика в Казахстане')
    bot.send_message(msg.from_user.id, 'Главное меню', reply_markup=markup)


def info(msg, markup):
    markup.row('Что такое коронавирус?')
    markup.row('Как обезопасить себя от коронавируса?')
    markup.row('Как диагностировать коронавирус?')
    markup.row('Где и как я могу лечить коронавирус?')
    markup.row('Карантин и изоляция')
    markup.row('В главное меню')
    bot.send_message(msg.from_user.id, 'Выберите вопрос:', reply_markup=markup)


def parse_data(msg):
    bot.send_message(msg.from_user.id, 'Секунду, обновляем данные...')
    dict = myparser.get_info_kz(myparser.url)
    all_data = 'На данный момент:\n\n'
    for data in dict:
        all_data = all_data + data + ': ' + dict[data] + '\n\n'
    all_data += '\nДанные были взяты с сайта worldometers.info.'
    bot.send_message(msg.from_user.id, all_data)


def info_covid(msg, markup):
    s = 'Выберите вопрос:\n\n'
    markup.row('Что такое коронавирус?')
    markup.row('Какой путь передачи коронавируса?')
    markup.row('Кто является источником коронавирусной инфекции?')
    markup.row('Откуда произошло заражение этой инфекцией?')
    markup.row('Есть ли вакцина против этой инфекции?')
    markup.row('Назад', 'В главное меню')
    bot.send_message(msg.from_user.id, s, reply_markup=markup)


def info_additional(msg, markup, s):
    bot.send_message(msg.from_user.id, s)
    info_covid(msg, markup)


def safety_additional(msg, markup, s):
    bot.send_message(msg.from_user.id, s)
    safety(msg, markup)


def diagnose_additional(msg, markup, s):
    bot.send_message(msg.from_user.id, s)
    diagnose(msg, markup)


def heal_additional(msg, markup, s):
    bot.send_message(msg.from_user.id, s)
    heal(msg, markup)


def isolation_additional(msg, markup, s):
    bot.send_message(msg.from_user.id, s)
    isolation(msg, markup)


def what_is_covid(msg, markup):
    s = 'Коронавирусы — это семейство вирусов, которые преимущественно поражают животных, но в некоторых случаях могут передаваться человеку.\n\nОбычно заболевания, вызванные коронавирусами, протекают в лёгкой форме, не вызывая тяжёлой симптоматики. Однако, бывают и тяжёлые формы, такие как ближневосточный респираторный синдром (Mers) и тяжёлый острый респираторный синдром (Sars).'
    info_additional(msg, markup, s)


def path_covid(msg, markup):
    s = 'Капли, которые образуются, когда инфицированный человек кашляет или чихает.\nКроме того, он может распространяться, когда кто-то касается любой загрязнённой поверхности, например дверной ручки.\nЛюди заражаются, когда они касаются загрязнёнными руками рта, носа или глаз.\nИзначально, вспышка произошла от животных, предположительно, источником стал рынок морепродуктов в Ухани, где шла активная торговля не только рыбой, но и такими животными, как сурки, змеи и летучие мыши.'
    info_additional(msg, markup, s)


def source_covid(msg, markup):
    s = 'Источником коронавирусной инфекции являются больные люди или животные.'
    info_additional(msg, markup, s)


def origin_covid(msg, markup):
    s = 'Природным резервуаром COVID-19 по данным китайских ученых являются дикие животные (летучие мыши).\nОсновным местом, откуда произошло заражение  человека, стал Южно-Китайский оптовый рынок морепродуктов и где приобретались дикие животные, включая летучих мышей и пресмыкающих.'
    info_additional(msg, markup, s)


def vaccine_covid(msg, markup):
    s = 'Вакцина против данной инфекции  до настоящего времени не разработана.'
    info_additional(msg, markup, s)


def safety(msg, markup):
    s = 'Выберите вопрос:\n\n'
    markup.row('Можно ли вылечить новый коронавирус?')
    markup.row('Кто в группе риска?')
    markup.row('Куда обратиться, если есть симптомы, схожые с коронавирусной инфекцией?')
    markup.row('Вирус устойчив во внейшней среде?')
    markup.row('Назад', 'В главное меню')
    bot.send_message(msg.from_user.id, s, reply_markup=markup)


def treatment(msg, markup):
    s = 'Да, разумеется.\nОднако не существует специфического противовирусного препарата от нового коронавируса — так же, как нет специфического лечения от большинства других респираторных вирусов, вызывающих простудные заболевания.\nВирусную пневмонию, основное и самое опасное осложнение коронавирусной инфекции, нельзя лечить антибиотиками.\nВ случае развития пневмонии — лечение направлено на поддержание функции лёгких.'
    safety_additional(msg, markup, s)


def risk(msg, markup):
    s = 'Люди всех возрастов рискуют заразиться вирусом. В заявлении комиссии по здравоохранению Ухани говорится, что возраст 60 самых последних случаев составляет от 15 до 88 лет. Однако, как и в случае большинства других вирусных респираторных заболеваний, дети и люди старше 65 лет, люди с ослабленной иммунной системой — в зоне риска тяжёлого течения заболевания.'
    safety_additional(msg, markup, s)


def symptoms(msg, markup):
    s = 'При появлении симптомов острой респираторной инфекции или подозрении на новую коронавирусную пневмонию необходимо обратиться в медицинское учреждение, в случае тяжелой формы немедленно вызвать скорую помощь на дом, до приезда бригады скорой помощи соблюдать меры профилактики (ограничить контакт с людьми, соблюдение этикета кашля, ношения маски, не заниматься самолечением).'
    safety_additional(msg, markup, s)


def environment(msg, markup):
    s = 'Коронавирус не устойчив во внешней среде, погибает при температуре 57 градусов С и выше, не устойчив к дезинфекционным и спиртосодержащим средствам.'
    safety_additional(msg, markup, s)


def diagnose(msg, markup):
    s = 'Выберите вопрос:\n\n'
    markup.row('Основные симптомы коронавирусной инфекции?')
    markup.row('В чем разница между коронавирусом и вирусом гриппа?')
    markup.row('Как определить у себя наличие коронавируса?')
    markup.row('Что подразумевает под собой карантин для лиц с подозрением COVID-19 корановирус?')
    markup.row('Назад', 'В главное меню')
    bot.send_message(msg.from_user.id, s, reply_markup=markup)


def main_symptoms(msg, markup):
    s = '''• высокая температура тела 
• головная боль 
• слабость 
• кашель 
• затрудненное дыхание 
• боли в мышцах 
• тошнота 
• рвота 
• диарея'''
    diagnose_additional(msg, markup, s)


def difference(msg, markup):
    s = '''Коронавирус и вирус гриппа могут иметь сходные симптомы, но генетически они абсолютно разные. 
Вирусы гриппа размножаются очень быстро — симптомы проявляются через два-три дня после заражения, а коронавирусу требуется для этого до 14 дней.'''
    diagnose_additional(msg, markup, s)


def determine(msg, markup):
    s = '''Своевременная диагностика является одним из важнейших мероприятий при возникновении угрозы появления и распространения нового коронавируса на территории Казахстана. 
Научными организациями здравоохранения менее чем за 7 дней с момента появления информации о структуре генов нового коронавируса разработаны два варианта диагностических наборов для определения присутствия вируса в организме человека. 
Наборы основаны на молекулярно-генетическом методе исследования, так называемой полимеразной цепной реакции (ПЦР). 
Использование этого метода дает тест-системам значительные преимущества. 
Первое это высокая чувствительность – с использованием разработанных тест-систем возможно обнаруживать единичные копии вирусов. 
Второе — для диагностирования заболевания нет необходимости отбирать кровь, достаточно отобрать ватным тампоном образец из носоглотки. 
Третье — результат анализа можно получить уже через 2-4 часа. 
Диагностические лаборатории Казахстана по всей территории обладают необходимым оборудованием и специалистами для использования разработанных средств диагностики.'''
    diagnose_additional(msg, markup, s)


def quarantine(msg, markup):
    s = '''Обязательное непрерывное нахождение в помещении, определенное местными исполнительными органами в течение 14 календарных дней. 
В течение карантина (14 дней): не разрешается покидать место карантинизации; разрешается пользование всеми видами связи (телефон, интернет). 
Мероприятия со стороны медицинского персонала в течение карантина включают: осмотр, измерение температуры тела, артериального давления, опрос. 
По медицинским показаниям может быть взят на лабораторное исследование биоматериал из зева, носоглотки, и, при необходимости, иные методы исследования. 
При нарушении режима со стороны лица под карантином, предусмотрена административная ответственность.'''
    diagnose_additional(msg, markup, s)


def heal(msg, markup):
    s = 'Выберите вопрос:\n\n'
    markup.row('Какой инкубационный период инфекции?')
    markup.row('Как защитить себя от заражения коронавирусом?')
    markup.row('Назад', 'В главное меню')
    bot.send_message(msg.from_user.id, s, reply_markup=markup)


def incubation(msg, markup):
    s = 'Инкубационный период (с момента заражения до появления признаков заболевания)  составляет от 2 до 14 дней, чаще 2-7 дней.'
    heal_additional(msg, markup, s)


def protect(msg, markup):
    s = '''Самое важное, что можно сделать, чтобы защитить себя, — это поддерживать чистоту рук и поверхностей. 
Держите руки в чистоте, часто мойте их водой с мылом или используйте дезинфицирующее средство. 
Также старайтесь не касаться рта, носа или глаз немытыми руками (обычно такие прикосновения неосознанно свершаются нами в среднем 15 раз в час). 
Носите с собой дезинфицирующее средство для рук, чтобы в любой обстановке вы могли очистить руки. 
Всегда мойте руки перед едой. 
Будьте особенно осторожны, когда находитесь в людных местах, аэропортах и других системах общественного транспорта. Максимально сократите прикосновения к находящимся в таких местах поверхностям и предметам, и не касайтесь лица. 
Носите с собой одноразовые салфетки и всегда прикрывайте нос и рот, когда вы кашляете или чихаете, и обязательно утилизируйте их после использования. 
Не ешьте еду (орешки, чипсы, печенье и другие снеки) из общих упаковок или посуды, если другие люди погружали в них свои пальцы. 
Избегайте приветственных рукопожатий и поцелуев в щеку, пока эпидемиологическая ситуация не стабилизируется. 
На работе регулярно очищайте поверхности и устройства, к которым вы прикасаетесь (клавиатура компьютера, панели оргтехники общего использования, экран смартфона, пульты, дверные ручки и поручни).'''
    heal_additional(msg, markup, s)


def isolation(msg, markup):
    s = 'Выберите вопрос:\n\n'
    markup.row('Кто будет взят на карантин?')
    markup.row('Готова ли наша страна в случае выявления корановируса?')
    markup.row('Что такое изоляция на дому, прибывшим из стран 1б категории?')
    markup.row('Назад', 'В главное меню')
    bot.send_message(msg.from_user.id, s, reply_markup=markup)


def isolaiton_countries(msg, markup):
    s = '''Согласно новому постановлению Главного санитарного врача РК от 4 марта 2020 года №12 «О дальнейшим усилении мер профилактики корановирусной инфекции в РК» есть список стран неблагополучные по коронавирусной инфекции COVID-19 и памятка по мероприятиям, вводимым на основании Постановления. Данное постановление есть на сайте МЗ РК и НЦОЗ МЗ РК. 
1 а) категория 
КНР 
Иран 
Южная Корея 
Италия 

 
1 б) категория 
Франция 
Германия 
Испания 
 
2 категория 
Швейцария 
Великобритания 
Нидерланды 
 
3 категория 
Бельгия 
Швеция 
Норвегия 
Индия 
Ирак 
Филиппины 
США'''
    isolation_additional(msg, markup, s)


def ready(msg, markup):
    s = '''В республике имеются все необходимые лекарственные средства и изделия медицинского назначения для поддерживающей терапии, подготовлены места с боксами для изоляции в инфекционных больницах, врачебный и средний медицинский персонал. 
Необходимо отметить, что ситуация находится на постоянном контроле Министерства здравоохранения.'''
    isolation_additional(msg, markup, s)


def home_isolation(msg, markup):
    s = '''Обязательное постоянное нахождение по месту проживания (дом, квартира, общежитие, гостиница и др.) в течение 14 календарных дней. 
В случае отсутствия условий для изоляции на дому, рекомендуется госпитализация. 
В течение изоляции по месту проживания (14 календарных дней) запрещается посещение мест массового скопления населения. 
Мероприятия со стороны медицинского персонала в течение домашнего карантина (14 календарных дней) включают: консультации и контроль домашнего карантина путем обзвона по телефону. 
По медицинским показаниям может быть взят на лабораторное исследование биоматериал из зева, носоглотки, и, при необходимости, проведены иные методы исследования. 
По медицинским показаниям (симптомы острой респираторной вирусной инфекций) лицо госпитализируется в медицинскую организацию (далее – МО) с целью диагностики и лечения за счет Республики Казахстан. 
При нарушении режима со стороны лица под домашним карантином, предусмотрена административная ответственность.'''
    isolation_additional(msg, markup, s)


bot.polling(none_stop=True, interval=0)